######################################################################
# Script created from tutorial
# https://learn.hashicorp.com/tutorials/terraform/github-actions
#
######################################################################
name: 'Terraform'
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Terraform Init
      id: init
      working-directory: ./envs/cloud
      run: terraform init
    - name: Terraform Plan
      id: plan
      working-directory: ./envs/cloud
      run: terraform validate -no-color
      continue-on-error: true

#    - name: Terraform Plan
#      id: plan
#      if: github.event_name == 'pull_request'
#      run: terraform plan -no-color
#      continue-on-error: true
#    - name: Update Pull Request
#      uses: actions/github-script@0.9.0
#      if: github.event_name == 'pull_request'
#      env:
#        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        script: |
#          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
#          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
#          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
#          <details><summary>Show Plan</summary>
#          \`\`\`${process.env.PLAN}\`\`\`
#          </details>
#          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
#
#          github.issues.createComment({
#            issue_number: context.issue.number,
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            body: output
#          })
#    - name: Terraform Plan Status
#      if: steps.plan.outcome == 'failure'
#      run: exit 1
#    - name: Terraform Apply
#      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
#      run: terraform apply -auto-approve
